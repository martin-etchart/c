/*
Programa: quinto.c
Curso: Programación C - http://iie.fing.edu.uy/rosaluna/wiki/Ipol:Modulo2
Proyecto: encuadro
Autor: Martin Etchart

Descripción:
Uniones.
-En el siguiente ejemplo se define la unión entre un Char y un Int. Examine el siguiente código e investigue su funcionamiento.
> main: ...// Codigo ejemplo 1

-Queremos implementar el acceso a los bits independientes de un registro. Para eso definimos un tipo de datos nuevo llamado tipo_bit. Utilice el siguiente código y verifique el acceso a los bits independientes. ¿Qué función cumple el separador ":"?. ¿En qué orden quedan almacenados los bits en memoria?.
> main: ...// Código ejemplo 2

-Implemente un código similar al anterior que permita el acceso a los primeros cuatro bits (primer nibble) y a los siguientes cuatro bits (segundo nibble).

*/

#include <stdio.h>

int main(){
	
	// Codigo ejemplo 1
	typedef union { 
		unsigned char byte; 
		int entero; 
	} registro;
 
 	printf("*Ejemplo 1 - Uniones\n");
	/* Ejemplo de uso */ 
	registro reg1; 
	reg1.entero = 50000;	// Se escribe: 50000d = C350h
	reg1.byte = 256;		// Se escribe:   256d = 0100h
							// Como se esta escribiendo a un byte (0..255)d se 								// produce overflow y trunca. 
							// En definitiva se sobreescribe: xx00h
							// Resulta en: C300h
	printf("reg1: 0x%X \n",reg1.byte); // Se muestra en byte escrito
	printf("reg1: 0x%X \n",reg1.entero); // Si lo mostramos como entero se ve todo.
	
	 printf("*Ejemplo 2 - Campo de bits\n");
	// Código ejemplo 2
	typedef struct { 
    	unsigned char bit0 : 1; 
	    unsigned char bit1 : 1; 
  		unsigned char bit2 : 1; 
    	unsigned char bit3 : 1; 
    	unsigned char bit4 : 1; 
    	unsigned char bit5 : 1; 
    	unsigned char bit6 : 1; 
    	unsigned char bit7 : 1; 
	} tipo_bit;
	
	typedef union {
		unsigned char valor;
		tipo_bit bit;
	} registro2;
		
	registro2 reg2;
	reg2.valor = 128;
	printf("Si escribimos un 128 obtenemos: %x%x%x%x%x%x%x%x\n",
			reg2.bit.bit0, reg2.bit.bit1, reg2.bit.bit2, reg2.bit.bit3,
			reg2.bit.bit4, reg2.bit.bit5, reg2.bit.bit6, reg2.bit.bit7);
	
	reg2.valor = 1;
	printf("Si escribimos un 1 obtenemos: %x%x%x%x%x%x%x%x\n",
		reg2.bit.bit0, reg2.bit.bit1, reg2.bit.bit2, reg2.bit.bit3,
		reg2.bit.bit4, reg2.bit.bit5, reg2.bit.bit6, reg2.bit.bit7);
		
	
	printf("*Ejemplo 3 - Campo de nibles/bits\n");
	typedef struct{
    	unsigned char bit0 : 1; 
	    unsigned char bit1 : 1; 
  		unsigned char bit2 : 1; 
    	unsigned char bit3 : 1; 		
	} tipo_nible;
		
	typedef struct {
		tipo_nible nib0;
		tipo_nible nib1;
	} tipo_byte;
	
	tipo_byte el_byte;
	
	el_byte.nib0.bit0 = 1;
	el_byte.nib0.bit1 = 1;
	el_byte.nib0.bit2 = 1;
	el_byte.nib0.bit3 = 1;
	x<
	printf("El nible queda %d\n",el_byte.nib0);
	
	
	
	

}
